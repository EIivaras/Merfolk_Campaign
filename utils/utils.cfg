#textdomain wesnoth-Merfolk_Campaign

## ----------------------------------------------- S01 -----------------------------------------------------

#util1
####Macro I use to streamline variables
#define CREATE_NEW_VARIABLE NAME VALUE

    [event]
    name=prestart
        [set_variable]
        name={NAME}
        value={VALUE}
        [/set_variable]
    [/event]

#enddef

#util2
####Adjusted Desc's macro to give more options
#define LOYAL_NAMED_GUARD TYPE ID NAME_WML X Y SIDE

    [unit]
        type={TYPE}
        id={ID}
        {NAME_WML}
        ai_special=guardian
        x,y={X},{Y}
        side={SIDE}
        [modifications]
            {TRAIT_LOYAL}
        [/modifications]
    [/unit]

#enddef

#util3
#define GUARD TYPE SIDE X Y

    [unit]
        type={TYPE}
        ai_special=guardian
        x,y={X},{Y}
        side={SIDE}
    [/unit]

#enddef

#util4
#define POTION_OF_VITALITY

    [object]
        id=potion1
        name= _ "Potion of Vitality"
        duration=forever
        silent=yes
        [filter]
            x,y=7,27
            side=1
        [/filter]
        [remove_item]
             x,y=7,27
        [/remove_item]
        [effect]
            apply_to=movement
            increase=1
        [/effect]
        [effect]
            apply_to=hitpoints
            increase=5
            increase_total=5
        [/effect]
    [/object]

#enddef

#util5
#define RING_OF_STRENGTH

    [object]
        id=ring1
        name= _ "Ring of Strength"
        duration=forever
        silent=yes
        [filter]
            x,y=5,5
            side=1
        [/filter]
        [remove_item]
            x,y=5,5
        [/remove_item]
        [effect]
            apply_to=attack
            increase_damage=1
        [/effect]
    [/object]

#enddef


#util6
##Macro for making units appear being animated
#define ANIMATED_UNIT SIDE TYPE TO_X TO_Y FROM_X FROM_Y WML

    [move_unit_fake]    
        type={TYPE}
        x={FROM_X},{TO_X}
        y={FROM_Y},{TO_Y}
        side={SIDE}
    [/move_unit_fake]
    {UNIT {SIDE} {TYPE} {TO_X} {TO_Y} {WML}}

#enddef

#util7
## Macro for handling moveto events where the player obtains an effect.
#define EVENT_MOVETO_HANDLER VARIABLE_NAME X Y SIDE RACE MSG_ACCEPT MSG_REJECT EFFECT_WML IS_OBJECT ADDITIONAL_EVENT_WML

    [set_variable]
        name=is_object
        value={IS_OBJECT}
    [/set_variable]
    [if]                    ## Player takes the event right away
        [variable]
            name={VARIABLE_NAME}
            equals=accepted
        [/variable]
        [then]
            [if]
                [variable]
                    name=is_object
                    equals=yes
                [/variable]
                [then]
                    {EFFECT_WML}
                [/then]
                [else]
                    [object]
                        silent=yes
                        [filter]
                            x,y={X},{Y}
                             side={SIDE}
                        [/filter]
                        [effect]
                            {EFFECT_WML}
                        [/effect]
                    [/object]
                [/else]
            [/if]
            {ADDITIONAL_EVENT_WML}
            [set_variable]
                name={VARIABLE_NAME}
                value=done
            [/set_variable]
        [/then]
        [else]  ##Player does not take it right away, thus, another event is created where the object has already been visited
            [allow_undo][/allow_undo]
            [event]
                name=moveto
                first_time_only=no
                [filter]
                    x={X}
                    y={Y}
                    side={SIDE}
                    race={RACE}
                [/filter]
                [if]
                    [variable]
                        name={VARIABLE_NAME}
                        not_equals=done
                    [/variable]
                    [then]
                        [message]
                            speaker=unit
                            [option]
                                label={MSG_ACCEPT}
                                [command]
                                    [set_variable]
                                        name={VARIABLE_NAME}
                                        value=accepted
                                    [/set_variable]
                                [/command]
                            [/option]
                            [option]
                                label={MSG_REJECT}
                                [command]
                                    [set_variable]
                                        name={VARIABLE_NAME}
                                        value=visited
                                    [/set_variable]
                                [/command]
                            [/option]
                        [/message]
                    [/then]
                [/if]

                [if]
                    [variable]
                        name={VARIABLE_NAME}
                        equals=accepted
                    [/variable]
                    [then]
                        [if]
                            [variable]
                                name=is_object
                                equals=yes
                            [/variable]
                            [then]
                                {EFFECT_WML}
                            [/then]
                            [else]
                                [object]
                                    silent=yes
                                    [filter]
                                        x,y={X},{Y}
                                        side={SIDE}
                                    [/filter]
                                    [effect]
                                        {EFFECT_WML}
                                    [/effect]
                                [/object]
                            [/else]
                        [/if]
                        {ADDITIONAL_EVENT_WML}
                        [set_variable]
                            name={VARIABLE_NAME}
                            value=done
                        [/set_variable]
                    [/then]
                    [else]
                        [allow_undo][/allow_undo]
                    [/else]
                [/if]
            [/event]
        [/else]
    [/if]

#enddef


## ---------------------------------- S02 ----------------------------------


## util 8, Easy gold moveto events
#define MOVETO_GOLD_EVENT X Y SIDE AMOUNT
    [event]
        name=moveto
        first_time_only=yes
        [filter]
            side={SIDE}
            x={X}
            y={Y}
        [/filter]
        [gold]
            side={SIDE}
            amount={AMOUNT}
        [/gold]
        [message]
            speaker=narrator
            message= _ "You found {AMOUNT} pieces of gold."
        [/message]
    [/event]
#enddef

## util 9, Last breath event util
#define VIU_LAST_BREATH UNIT TEXT_STRING
    [event]
        name=last breath
        [filter]
            id={UNIT}
        [/filter]
        [message]
            speaker={UNIT}
            message={TEXT_STRING}
        [/message]
    [/event]
#enddef

## util 10, Recall retinue MACRO
#define RECALL_KAI_RETINUE
    [store_unit]
        [filter]
            side=1
            x,y=recall,recall
            role=retinue
        [/filter]
        kill=no
        variable=to_be_recalled
    [/store_unit]
    [foreach]
        array=to_be_recalled
        [do]
            [recall]
                id=$this_item.id
            [/recall]
        [/do]
    [/foreach]

    {CLEAR_VARIABLE to_be_recalled}
#enddef

## --------------------------------------------- S07 ------------------------------------------

##util 11, puts a unit with random xp (up to MAX_XP) to SIDE's recall list. Has to be inside prestart event.
#define UNIT_TO_RECALL_LIST SIDE TYPE ID ADDITIONAL_UNIT_WML MAX_XP
    {NAMED_UNIT {SIDE} {TYPE} 1 1 {ID} {ID} {ADDITIONAL_UNIT_WML}}
    [set_variable]
        name=tempxp
        rand=1..{MAX_XP}
    [/set_variable]
    [modify_unit]
        [filter]
            id={ID}
        [/filter]
        [effect]
            apply_to=experience
            set=$tempxp
        [/effect]
    [/modify_unit]
    {PUT_TO_RECALL_LIST (id={ID})}
    {CLEAR_VARIABLE tempxp}
#enddef

##util 12, walking corpse random waves
#define WALKING_CORPSE_WAVE EVENT_NAME SIDE VARIATION FROM_X TO_X FROM_Y TO_Y BOTTOM_RANGE TOP_RANGE
    [event]
        name={EVENT_NAME}
        first_time_only=no

        [set_variable]
            name=spawn_number
            rand="{BOTTOM_RANGE}..{TOP_RANGE}"
        [/set_variable]
        # Finding a random tile within the given ranges
        [random_placement]
            [filter_location]
                # Change these numbers to alter tile parameters
                x={FROM_X}-{TO_X}
                y={FROM_Y}-{TO_Y}
            [/filter_location]
            num_items=$spawn_number
            variable=placement
            [command]
                apply_to=recruiting
                [unit]
                    type=Walking Corpse
                    side={SIDE}
                    x,y=$placement.x,$placement.y
                    animate=yes
                    variation={VARIATION}
                [/unit]
            [/command]
        [/random_placement]
    [/event]
#enddef

##util 13, creates certain terrain {TERRAIN_PUT} type inside certain coordinates {COORDS_X/Y} replacing certain terrain type(s) {TERRAIN_CRUSH}
#define CREATE_TERRAIN_SEEDS TERRAIN_PUT TERRAIN_CRUSH COORDS_X COORDS_Y NUMBER_OF_TIMES_TO_REPEAT
    [for]
        end={NUMBER_OF_TIMES_TO_REPEAT}
        [do]
            [store_locations]
                x={COORDS_X}
                y={COORDS_Y}
                terrain={TERRAIN_CRUSH}
                variable=locs
            [/store_locations]
            {RANDOM 1..$locs.length}
            {VARIABLE_OP random sub 1}
            [terrain]
                x=$locs[$random].x
                y=$locs[$random].y
                terrain={TERRAIN_PUT}
            [/terrain]
            {CLEAR_VARIABLE locs}
        [/do]
    [/for]
#enddef

##util 14, creates certain terrain {TERRAIN_PUT} type in adjacency to certain terrain type {TERRAIN_ADJ} in coordinates {COORDS_X/Y} replacing certain terrain type(s) {TERRAIN_CRUSH}
#define GROW_TERRAIN TERRAIN_PUT TERRAIN_CRUSH TERRAIN_ADJ COORDS_X COORDS_Y NUMBER_OF_TIMES_TO_REPEAT
    [for]
        end={NUMBER_OF_TIMES_TO_REPEAT}
        [do]
            [store_locations]
                x={COORDS_X}
                y={COORDS_Y}
                [filter_adjacent_location]
                    terrain={TERRAIN_ADJ}
                [/filter_adjacent_location]
                terrain={TERRAIN_CRUSH}
                variable=locs
            [/store_locations]
            {RANDOM 1..$locs.length}
            {VARIABLE_OP random sub 1}
            [terrain]
                x=$locs[$random].x
                y=$locs[$random].y
                terrain={TERRAIN_PUT}
            [/terrain]
            {CLEAR_VARIABLE locs}
        [/do]
    [/for]
#enddef    